package com.sbm.mc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RvpApiManagementResponseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiManagementResponseAllPropertiesEquals(
        RvpApiManagementResponse expected,
        RvpApiManagementResponse actual
    ) {
        assertRvpApiManagementResponseAutoGeneratedPropertiesEquals(expected, actual);
        assertRvpApiManagementResponseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiManagementResponseAllUpdatablePropertiesEquals(
        RvpApiManagementResponse expected,
        RvpApiManagementResponse actual
    ) {
        assertRvpApiManagementResponseUpdatableFieldsEquals(expected, actual);
        assertRvpApiManagementResponseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiManagementResponseAutoGeneratedPropertiesEquals(
        RvpApiManagementResponse expected,
        RvpApiManagementResponse actual
    ) {
        assertThat(expected)
            .as("Verify RvpApiManagementResponse auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiManagementResponseUpdatableFieldsEquals(
        RvpApiManagementResponse expected,
        RvpApiManagementResponse actual
    ) {
        assertThat(expected)
            .as("Verify RvpApiManagementResponse relevant properties")
            .satisfies(e -> assertThat(e.getSource()).as("check source").isEqualTo(actual.getSource()))
            .satisfies(e -> assertThat(e.getLodgingId()).as("check lodgingId").isEqualTo(actual.getLodgingId()))
            .satisfies(e -> assertThat(e.getFd()).as("check fd").isEqualTo(actual.getFd()))
            .satisfies(e -> assertThat(e.getTd()).as("check td").isEqualTo(actual.getTd()))
            .satisfies(
                e ->
                    assertThat(e.getRespondableCountsPositive())
                        .as("check respondableCountsPositive")
                        .isEqualTo(actual.getRespondableCountsPositive())
            )
            .satisfies(
                e ->
                    assertThat(e.getRespondableCountsNegative())
                        .as("check respondableCountsNegative")
                        .isEqualTo(actual.getRespondableCountsNegative())
            )
            .satisfies(
                e ->
                    assertThat(e.getRespondedCountsPositive())
                        .as("check respondedCountsPositive")
                        .isEqualTo(actual.getRespondedCountsPositive())
            )
            .satisfies(
                e ->
                    assertThat(e.getRespondedCountsNegative())
                        .as("check respondedCountsNegative")
                        .isEqualTo(actual.getRespondedCountsNegative())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiManagementResponseUpdatableRelationshipsEquals(
        RvpApiManagementResponse expected,
        RvpApiManagementResponse actual
    ) {}
}
