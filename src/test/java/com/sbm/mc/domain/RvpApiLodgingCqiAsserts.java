package com.sbm.mc.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RvpApiLodgingCqiAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiLodgingCqiAllPropertiesEquals(RvpApiLodgingCqi expected, RvpApiLodgingCqi actual) {
        assertRvpApiLodgingCqiAutoGeneratedPropertiesEquals(expected, actual);
        assertRvpApiLodgingCqiAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiLodgingCqiAllUpdatablePropertiesEquals(RvpApiLodgingCqi expected, RvpApiLodgingCqi actual) {
        assertRvpApiLodgingCqiUpdatableFieldsEquals(expected, actual);
        assertRvpApiLodgingCqiUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiLodgingCqiAutoGeneratedPropertiesEquals(RvpApiLodgingCqi expected, RvpApiLodgingCqi actual) {
        assertThat(expected)
            .as("Verify RvpApiLodgingCqi auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiLodgingCqiUpdatableFieldsEquals(RvpApiLodgingCqi expected, RvpApiLodgingCqi actual) {
        assertThat(expected)
            .as("Verify RvpApiLodgingCqi relevant properties")
            .satisfies(e -> assertThat(e.getLodgingId()).as("check lodgingId").isEqualTo(actual.getLodgingId()))
            .satisfies(
                e -> assertThat(e.getAverageCurrentPeriod()).as("check averageCurrentPeriod").isEqualTo(actual.getAverageCurrentPeriod())
            )
            .satisfies(e -> assertThat(e.getTendancy()).as("check tendancy").isEqualTo(actual.getTendancy()))
            .satisfies(e -> assertThat(e.getChange()).as("check change").isEqualTo(actual.getChange()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(
                e -> assertThat(e.getAveragePreviousPeriod()).as("check averagePreviousPeriod").isEqualTo(actual.getAveragePreviousPeriod())
            )
            .satisfies(e -> assertThat(e.getFd()).as("check fd").isEqualTo(actual.getFd()))
            .satisfies(e -> assertThat(e.getTd()).as("check td").isEqualTo(actual.getTd()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRvpApiLodgingCqiUpdatableRelationshipsEquals(RvpApiLodgingCqi expected, RvpApiLodgingCqi actual) {}
}
